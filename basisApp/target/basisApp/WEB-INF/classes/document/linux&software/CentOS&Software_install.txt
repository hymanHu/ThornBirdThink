boss机：10.40.4.7(Hj@A)
一. 系统安装与配置
	1. 系统版本：CentOS release 6.3
	2. 安装
	3. 系统配置
		a. 配置读写缓冲以及打开文件句柄的限制
			# vi /etc/sysctl.conf
				# net.ipv4.tcp_rmem 配置读缓冲的大小，三个值，第一个是这个读缓冲的最小值，第三个是最大值，中间的是默认值。
					为了使每个socket所使用的内存数最小，我这里设置默认值为4096。
				# net.ipv4.tcp_wmem 用来配置写缓冲的大小。
				# file-max:指定了系统范围内所有进程可打开的文件句柄的数量限制，
					当收到"Too many open files in system"这样的错误消息时, 就应该曾加这个值了.
				fs.file-max = 999999
				net.ipv4.tcp_rmem = 4096 4096 16777216
				net.ipv4.tcp_wmem = 4096 4096 16777216
			# sysctl - p
		b. allow for 999,999 open file descriptors for all users
			# vi /etc/security/limits.conf
				#<domain> <type> <item> <value>
				* - nofile 999999
			# echo 999999>/proc/sys/fs/file-max
			$ ulimit -n // If the result is "999999", it means setting "Open-Files-Limit" succeeded, else failed.
		c. 设置Firewall
			# vi /etc/sysconfig/iptables
				-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
			
				:RH-Firewall-1-INPUT - [0:0]
				-A RH-Firewall-1-INPUT -d 224.0.0.18 -j ACCEPT
				-A RH-Firewall-1-INPUT -d 224.0.0.0/8 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 2181 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 123 -j ACCEPT
				-A RH-Firewall-1-INPUT -p udp -m udp --dport 123 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 2888 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 3306 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 3888 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 10000 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 9999 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 5210 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 5211 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6120 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6121 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6122 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6379 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6380 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6381 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6382 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6383 -j ACCEPT
				-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 6384 -j ACCEPT
			# /etc/init.d/iptables restart
		d. 安装NTP
			# yum -y install ntp
			# cp /etc/ntp.conf /etc/ntp.conf~
			# service ntpd stop | start | restart
			# 查询NTP公共服务器检查延迟
			# ntpq -pn
			# 查看一段时间内服务器各项数值的变化(服务器命令)
			# watch ntpq -p
			# 和公共时间服务器进行时间同步
			# ntpdate -b pool.ntp.org
			
			# 配置NTP标准服务器
			# vi /etc/ntp.conf
    			driftfile /var/lib/ntp/drift
    			#允许本机地址（127.0.0.1）对NTPD各服务的访问
    			restrict 127.0.0.1
				server 127.127.1.0 minpoll 4 maxpoll 5
    			fudge 127.127.1.0 stratum 2
			# service ntpd restart
			
			# 配置NTP客户端集群
			# vi /etc/ntp.conf
    			driftfile /var/lib/ntp/drift
    			#允许本机地址（127.0.0.1）对NTPD各服务的访问
    			restrict 127.0.0.1
    			restrict ***.***.***.** mask 255.255.255.255
				server ***.***.***.** minpoll 4 maxpoll 5
    			fudge 127.127.1.0 stratum 3
    			logfile /etc/ntp.log
			# ntpdate -b ***.***.***.**
			# 报错“the NTP socket is in use, exiting”
			# /etc/rc.d/init.d/ntpd stop
			# ntpdate -b ***.***.***.**
		e. 配置静态ip
			# vi /etc/sysconfig/network-scripts/ifcfg-eth0 // 修改静态ip
				DEVICE=eth0
				ONBOOT=yes
				BOOTPROTO=static
				IPADDR=192.168.0.3
				NETMASK=255.255.255.0
				GATEWAY=192.168.0.1
			# /sbin/ifdown eth0 // 使IP地址生效
			# /sbin/ifup eth0
			# echo "nameserver 211.98.1.28">> /etc/resolv.conf // 配置dns解析
			# /etc/init.d/network restart // 通知网关更新信息
	4. 用户配置
		a. 添加用户和组
			# useradd lj
			# passwd livejournal #如果要使用证书登录，则可跳过这步
			# useradd mysql -s /sbin/nologin
			# useradd memcached -s /sbin/nologin
		b. 添加常用目录
			脚本：dir_helper
			
			# /opt/downloads--软件下载
			# /opt/local--软件安装
			# /opt/var--存储程日志等
			# /opt/data--储存MYSQL和Zookeeper数据文件
			# /opt/etc--储存配置文件
					
			# mkdir -p /opt/downloads
			# mkdir -p /opt/local
			# mkdir -p /opt/var
			# mkdir -p /opt/data
			# mkdir -p /opt/etc
			
			# find /opt/. | xargs chown lj:lj
		c. 生成环境变量脚本
			# su - lj -c 'cat >/opt/local/bin/lj_env.sh << END
				export JAVA_HOME=/usr/java/default
				export PATH=/opt/local/bin:\$JAVA_HOME/bin:\$PATH
				export JETTY_HOME=/opt/local/jetty
				export MVN_HOME=/opt/local/apache-maven
				export TOMCAT_HOME=/opt/local/apache-tomcat
				export CATALINA_HONE=/opt/local/apache-tomcat
				export PATH=/opt/local/redis/bin:/opt/local/mysql/bin:\$JAVA_HOME/bin:\$JETTY_HOME/bin:\$MVN_HOME/bin:\$TOMCAT_HOME/bin:\$CATALINA_HONE/bin:\$PATH
				END'
			# ln -s /opt/local/bin/lj_env.sh /etc/profile.d/lj_env.sh
	5. yum
		yum镜像备份
			# cd /etc/yum.repos.d/
			# cp CentOS-Base.repo CentOS-Base.repo.save
		yum 默认下载目录: /var/cache/yum, 自定义yum下载目录: –downloaddir=/data/tmp
		设置yum本地仓库(vi /etc/yum.repos.d/CentOS-Base.repo)
	6. 安装工具包
		GCC(C/C++编译器)
			$ yum -y install gcc.x86_64
			$ yum -y install make.x86_64
				
			$ gcc --version
		Wget
			$ yum -y install wget
三. 常用软件安装
	1. JDK
		$ wget http://download.oracle.com/otn-pub/java/jdk/6u27-b07/jdk-6u27-linux-x64.bin -O /opt/downloads/jdk-6u27-linux-x64.bin
		$ cd /opt/downloads
		$ chmod +x jdk-6u27-linux-x64.bin
		$ ./jdk-6u27-linux-x64.bin
		$ mv /opt/downloads/jdk1.6.0_27 /opt/local
		$ ln -s /opt/local/jdk1.6.0_27 /opt/local/jdk
		
		$ su - root -c "echo 'export JAVA_HOME=/opt/local/jdk' >> /etc/profile"
		$ su - root -c "echo 'export PATH=\$JAVA_HOME/bin:\$PATH' >> /etc/profile"
		$ source /etc/profile
		
		$ java -version
		
		=================================================
		$ yum install jdk -y
		$ java -version
	2. Maven
		$ wget http://labs.renren.com/apache-mirror/maven/maven-3/3.0.4/binaries/apache-maven-3.0.4-bin.tar.gz -O /opt/downloads/apache-maven-3.0.4-bin.tar.gz
		$ cd /opt/downloads/
		$ tar xzvf apache-maven-3.0.4-bin.tar.gz
		$ mv apache-maven-3.0.4 /opt/local/maven-3.0.4
		$ ln -s /opt/local/maven-3.0.4 /opt/local/maven
		
		$ su - root -c "echo 'export PATH=/opt/local/maven/bin:\$PATH' >> /etc/profile"
		$ source /etc/profile
		
		$ mvn -version
	3. Jetty
		$ wget http://dist.codehaus.org/jetty/jetty-hightide-8.0.0/jetty-hightide-8.0.0.v20110901.tar.gz -O /opt/downloads/jetty-hightide-8.0.0.v20110901.tar.gz
		$ cd /opt/downloads
		$ tar xzvf jetty-hightide-8.0.0.v20110901.tar.gz
		$ mv jetty-hightide-8.0.0.v20110901/* /opt/local/jetty/
		$ rm -rf jetty-hightide-8.0.0.v20110901
		
		$ su - root -c "echo 'export JETTY_HOME=/opt/local/jetty' >> /etc/profile"
		$ source /etc/profile
		
		$ vi /opt/local/jetty/etc/jetty.xml
		Change"<Property default="8080"/>" as "<Property default="9090"/>"
		$ rm -rf /opt/local/jetty/contexts/*
	4. Keepalived
		# 安装依赖包
		# yum -y install libnl-devel kernel-devel openssl-devel ipvsadm
		# ln -s /usr/src/kernels/2.6.18-274.7.1.el5-x86_64/ /usr/src/linux
			# 如果操作系统CentOS 6.0, 需要修复"Keepalived process failed" bug
				# Please check symbolic link "/usr/src/linux" status and remove it if it's broken.
				# file /usr/src/linux
				# rm -f /usr/src/linux
				# Recreate new symbolic link "/usr/src/linux" to the newest kernel version. 
				# ls /usr/src/kernels/
				# ln -s /usr/src/kernels/2.6.18-274.7.1.el5-x86_64/ /usr/src/linux
				# file /usr/src/linux
				# Re-install & Re-configure Keepalived
			# 如果操作系统CentOS 6.0, 安装 Popt libraries
				# yum install popt-devel
		# ipvsadm

		# 安装Keepalived
		$ wget http://www.keepalived.org/software/keepalived-1.2.1.tar.gz -O /opt/downloads/keepalived-1.2.1.tar.gz
		$ cd /opt/downloads
		$ tar xzvf keepalived-1.2.1.tar.gz
		$ cd keepalived-1.2.1
		$ ./configure --prefix=/opt/local/keepalived
		$ make && make install
	5. Memcached
		$ su - root -c "yum -y install libevent-devel.x86_64"
		
		$ wget http://memcached.googlecode.com/files/memcached-1.4.6.tar.gz -O /opt/downloads/memcached-1.4.6.tar.gz 
		$ cd /opt/downloads
		$ tar xzvf memcached-1.4.6.tar.gz
		$ cd memcached-1.4.6
		$ ./configure --prefix=/opt/local/ --enable-64bit
		$ make && make install
		
		$ su - root -c "echo 'export PATH=/opt/local/bin:\$PATH' >> /etc/profile"
		$ source /etc/profile
		
		$ memcached -help
	6. MYSQL
		$ wget http://downloads.mysql.com/archives/mysql-5.5/mysql-5.5.15-linux2.6-x86_64.tar.gz -O /opt/downloads/mysql-5.5.15-linux2.6-x86_64.tar.gz
		$ cd /opt/downloads
		$ tar xzvf mysql-5.5.15-linux2.6-x86_64.tar.gz
		$ mv mysql-5.5.15-linux2.6-x86_64 /opt/local/mysql-5.5.15
		$ ln -s /opt/local/mysql-5.5.15 /opt/local/mysql
		
		$ su - root -c "echo 'export PATH=/opt/local/mysql/bin:\$PATH' >> /etc/profile"
		$ source /etc/profile
		
		$ mysql --version
		
		# 配置数据库
			# 安装依赖包
			$ su - root -c "yum -y install libaio"
			# 备份已有的配置文件
			$ su - root -c "mv /etc/my.cnf /etc/my.cnf~"
			# 初始化数据库实例，创建实例对应配置文件, 参数为db实例数量
			$ su - root -c "/opt/local/bin/init_dbs.sh 1"
			# 检查配置中 ‘innodb_buffer_pool_size = 4G’ && ‘innodb_log_file_size = 256M’
			# 如果内存不足将无法启动InnoDb引擎，无法启动mysql
			$ /opt/local/bin/mysql.server start
			$ netstat -an | grep 3306
			# 创建数据库以及表
			$ su - root -c "/opt/local/bin/rs_schema_init.sh 1 5"
			
			# 登录数据库，创建lj用户以及相应权限
			$ mysql --defaults-file=/opt/etc/mysql/db1.cnf --user=root
			$ use mysql;
			$ delete from user where Host= '$server';
			$ delete from user where User='';
			$ GRANT ALL PRIVILEGES ON *.* TO 'lj'@'%' IDENTIFIED BY 'livejournal' WITH GRANT OPTION;
			$ flush privileges;
			
			# 关闭防火墙
			$ su - root -c "service iptables stop"
	
		#常用命令
			$ /opt/local/mysql/bin/mysql --defaults-extra-file=/opt/etc/mysql/db1.cnf -uroot
			$ /opt/local/mysql/bin/mysql -h127.0.0.1 -uroot
				show slave status \G;
				show databases;
				use relationdb_edges;
				show tables;
				SHOW PROCESSLIST;
				SHOW FULL PROCESSLIST;
				show status;
			
		#删除MySQL Binary Log文件
			作用：数据恢复，在主从服务器上提高复制的可靠性。
			#log-bin=mysql-bin
			#binlog_format=mixed
		
		#出现Got error 28 from storage engine错误
			mysql> show master logs; //查看日志
			mysql> reset master; //删除列于索引文件中的所有二进制日志，把二进制日志索引文件重新设置为空，并创建一个新的二进制日志文件
			#log-bin=mysql-bin
			#binlog_format=mixed
		
		mysql插入平稳配置
			innodb_log_buffer_size= 100M
			innodb_log_file_size = 500M
			innodb_data_file_path = ibdata1:1G:autoextend
	7. Redis
		$ wget http://redis.googlecode.com/files/redis-2.4.1.tar.gz -O /opt/downloads/redis-2.4.1.tar.gz
		$ cd /opt/downloads
		$ tar xzvf redis-2.4.1.tar.gz
		$ cd redis-2.4.1
		$ make && make PREFIX=/opt/local/redis install
		
		$ su - root -c "echo 'export PATH=/opt/local/redis/bin:\$PATH' >> /etc/profile"
		$ source /etc/profile
		
		$ redis-server --version
		
		# 调整VM参数
		$ su - root -c "vi /etc/sysctl.conf"
			vm.overcommit_memory=1 //如果没有则添加
		$ su - root -c "sysctl -p"
		
		# 初始化两个attr，maxmemory 1g
		$ /opt/local/bin/redis_init attr 2 1
		# 初始化两个队列，maxmemory 20g，slaveof vip2-queue:5210
		$ /opt/local/bin/redis_init queue 2 20 vip2-queue:5210
		$ sed -i s/5210/5211/g /opt/etc/queue/queue-5211.cnf
		
		# 常用命令
			$ /opt/local/bin/redis.server
			$ /opt/local/redis/bin/redis-cli -p 6379
				info
				keys *
				flushdb
				dbsize
				CONFIG GET *
				CONFIG GET MAX*
				CONFIG SET maxmemory 11111111
				scard 1FS
				client list //客户端连接列表
				monitor //查看镜像
				LLEN ** 获得list长度，相当于arraylist --LRANGE Q/REL/C/C_MYSQL 0 -1
				HLEN ** 获得list长度，相当于hashmap --HGETALL **
				hgetall AFF4te // Get all the fields and values in a hash
				SMEMBERS 1FS // Get all the members in a set
				
		# 修改配置
			$ vi /opt/etc/redgraph/redgraph-6120.cnf
				save 600 100 // 是否保存
				maxmemory-policy allkeys-lru //达到最大内存值后会删除
	8. Zookeeper
		$ wget http://labs.renren.com/apache-mirror//zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz -O /opt/downloads/zookeeper-3.3.3.tar.gz
		$ cd /opt/downloads
		$ tar xzvf zookeeper-3.3.3.tar.gz
		$ mv zookeeper-3.3.3/ /opt/local/
		$ ln -s /opt/local/zookeeper-3.3.3 /opt/local/zookeeper
		$ cd /opt/local/zookeeper-3.3.3/conf
		# sed是用一个值替换另一个值
		$ sed 's/^dataDir=.*$/dataDir=\/opt\/data\/zookeeper/g' zoo_sample.cfg > zoo.cfg
		
		$ /opt/local/zookeeper/bin/zkServer.sh start
		$ /opt/local/zookeeper/bin/zkCli.sh
			ls /
		
		Zookeeper日志文件输出
			Copy zklog.patch  into "/opt/local/bin/"
			$ chmod +x /opt/local/bin/zklog.patch
			$ /opt/local/bin/zklog.patch
	9. Screen插件
		$ su - root -c "yum -y install screen"
		$ screen
		$ screen -ls
		$ screen -r 4523
 		$ exit
 	10. HeartBeat
 		# vi /etc/yum.repos.d/centos.repo
 			[centos-6-base]
			name=CentOS-$releasever - Base
			mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os
			#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
			enabled=1
		# yum -y install  make  automake autoconf libtool pkgconfig glib2-devel libxml2-devel e2fsprogs-devel libxslt-devel libuuid-devel libtool-ltdl-devel pacemaker cman ccs resource-agents
		# LIBS="/usr/lib64/libuuid.a"
		
		# wget http://hg.linux-ha.org/heartbeat-STABLE_3_0/archive/tip.tar.bz2
		# wget http://bzip.org/1.0.6/bzip2-1.0.6.tar.gz
		# wget http://hg.linux-ha.org/glue/archive/glue-1.0.7.tar.bz2
		
		# tar zxvf bzip2-1.0.6.tar.gz
		# cd bzip2-1.0.6
		# change line "CFLAGS= -Wall -Winline -O2 -g $(BIGFILES) " in file Makefile to "CFLAGS=-fPIC -Wall -Winline -O2 -g $(BIGFILES)"
		# make && make install
		
		# tar jxvf glue-1.0.7.tar.bz2
		#  cd Reusable-Cluster-Components-glue--glue-1.0.7
		# ./autogen.sh
		# ./configure
		# make && make install
		
		# tar jxvf tip.tar.bz2
		# cd Heartbeat-3-0-add12b838ef4
		# ./ConfigureMe configure
		# make && make install
		
		# ln -s /etc/ha.d /usr/etc
		# vi /etc/ha.d/ha.cf // create file
			logfile /var/log/ha-log
			logfacility local0
			keepalive 2
			deadtime 30
			warntime 10
			auto_failback on
			respawn hacluster /usr/lib64/heartbeat/ipfail
			ping_group always_up_nodes 172.17.20.35 172.17.20.42
			node bil1-rgr01a bil1-rgr01b
			ucast eth1 172.17.20.35 #if local ip is 172.17.20.42
		# vi /etc/ha.d/haresources // create file
			bil1-rgr01b 172.17.20.82 graph-failover
		# vi /etc/ha.d/authkeys // create file
			auth 1
			1 sha1 LiveJournal Graph Cluster 1
		# chmod 600 /etc/ha.d/authkeys 
			
	
			