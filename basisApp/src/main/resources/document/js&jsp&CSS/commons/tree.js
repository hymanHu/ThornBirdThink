/* * JsTree object * 需要先导入dialog.js */var Tree = function(tid, uri) {	this.treeId = tid;	this.uri = uri;	this.url = "http://" + location.hostname + ":" + location.port			+ "/zookeeper_console" + uri;	this.selectNode = "";	var self = this;	var themes = {		"theme" : "classic",// apple\classic		"dats" : true,		"icons" : true	};	var plugins = [ "themes", "json_data", "ui" ];	var ctmitems = {		"new" : true,		"ccp" : null,		"rename" : true,		"remove" : true	};	/*	 * load tree data(一次性加载tree)	 */	this.loadData = function(selectCallback) {		$.ajax({			beforeSend : function() {				//loadDialog.open('<img src="' + document.location.href + 'image/load.gif" />&nbsp;&nbsp;Please wait...');				loadDialog.openMsg("Please wait...");			},			url : self.url,			dataType : "jsonp",			timeout : 30000,			success : function(data) {				self.loadStaticTree(data, selectCallback);				loadDialog.close();			},			error : function() {				loadDialog.close();				$("#" + self.treeId).children().remove();				msgDialog.openMsg("No data return from database.");			}		});	};	/*	 * draw static tree(一次性加载tree)	 */	this.loadStaticTree = function(data, selectCallback) {		$("#" + self.treeId).jstree({			"themes" : themes,			"json_data" : {				"data" : data			},			"plugins" : plugins		}).bind("select_node.jstree", function(e, data) {			self.selectNode = new TreeNode(data.rslt.obj.attr("id"),					data.rslt.obj.attr("nodekey"), data.rslt.obj.attr("nodevalue"), 					data.rslt.obj.attr("identifier"), data.rslt.obj.attr("parentIdentifier"));			if (selectCallback != undefined) {				selectCallback(self.selectNode);			}		});	};	/*	 * 动态加载tree(不写error项，没有子节点返回时也会跳转error)	 */	this.LoadDynamicTree = function(selectCallback) {		$("#" + self.treeId).jstree({			"themes" : themes,			"json_data" : {				"ajax" : {					"url" : self.uri,					"async" : true,					"data" : function(n) {						return {							id : n.attr ? n.attr("identifier") : "root"						};					},					"success" : function(data, textStatus, jqXHR) {					}/*,					"error" : function(jqXHR, textStatus, errorThrown) {						// $("#" + self.treeId).children().remove();						msgDialog.openMsg("No data return from zookeeper.");					}*/				},				"state" : "open"// open/closed			},			"contextmenu" : {				"select_node" : false,				"show_at_node" : true,				"items" : ctmitems			},			"plugins" : plugins		}).bind("select_node.jstree", function(e, data) {			self.selectNode = new TreeNode(data.rslt.obj.attr("id"),				data.rslt.obj.attr("nodekey"), data.rslt.obj.attr("nodevalue"), 				data.rslt.obj.attr("identifier"), data.rslt.obj.attr("parentIdentifier"));			if (selectCallback != undefined) {				selectCallback(self.selectNode);			}		}).bind("refresh.jstree", function(e, data) {		}).bind("open_node.jstree", function(e, data) {		});	};	this.openAll = function() {		$.jstree._reference("#" + this.treeId).open_all();	};	this.closeAll = function() {		$.jstree._reference("#" + this.treeId).close_all();	};		/*	 * reflesh node, grade=0:current, grade=1:parent, grade=2:root	 * 刷新本节点的时候，做打开节点动作node.open_node()，因异步操作添加延时动作	 */	this.refreshNode = function(grade) {		if (self.selectNode == "") {			msgDialog.open("Please select node.");			return;		}				var node = $.jstree._reference("#" + self.selectNode.id);		if (node == null) {			node = $.jstree._reference("#_");		}				if (grade == 0) {			node.refresh(node._get_node());			setTimeout(function(){node.open_node();}, 1000);		} else if (grade == 1) {			if (self.selectNode.identifier == "/") {				node.refresh();			} else {				node.refresh(node._get_parent(node._get_node()));			}		} else if (grade == 2) {			node.refresh();		}	};};/* * Tree node object */var TreeNode = function(id, nodeKey, nodeValue, identifier, parentIdentifier) {	this.id = id;	this.nodeKey = nodeKey;	this.nodeValue = nodeValue;	this.identifier = identifier;	this.parentIdentifier = parentIdentifier;};