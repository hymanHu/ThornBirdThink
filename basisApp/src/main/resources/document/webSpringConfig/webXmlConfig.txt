1、web启动流程
	1.1、容器启动后会去读取web.xml两个节点：<context-param></context-param> & <listener></listener>
	1.2、容器创建ServletContext，并将<context-param></context-param>转化为键值对交给ServletContext
	1.3、容器创建<listener></listener>中的实例，并开始监听并做相关操作
	1.4、容器调转<welcome-file-list></welcome-file-list>，如果没有定义该节点，调转index页面

2、应用范围内的初始化参数
	<!-- servlet上下文初始化参数 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- 
			第一种写法，配置文件放在src/main/resources下
			第二种写法，配置文件放在/WEB-INF/conf/spring下
		 -->
		<!--  
		<param-value>classpath:applicationContext.xml</param-value>
		-->
		<param-value>/WEB-INF/conf/spring/applicationContext.xml</param-value>
	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j-config.xml</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>3000</param-value>
	</context-param>
	<!-- webAppRootKey是web项目的唯一标识，多个web项目在调试的时候设置不同的value，以免重复  -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp2.root</param-value>
	</context-param>
	
	//serverlet中获取参数
	ServletContext context = this.getServletConfig().getServletContext();
	String param_name = ServletContextEvent.getServletContext().getInitParamter("param_name");
	//jsp中获取参数
	${initParam.param_name}
	
3、定义监听器
	<!-- log4j监听器，应放在spring监听器之前，因为spring也会加载log4j.properties，放在后面会抛出两个警告 -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 监听session是否过期 -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>
	
	//监听器程序实现 ServletContextListener 类
	
4、过滤器
	<!-- 字符过滤器 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- spring security过滤器 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 
		hibernate过滤器 
		singleSession-true:允许在每次的整个request的过程中使用同一个hibernate session,
			可以在这个request任何时期lazy loading数据
		singleSession-false:不会在每次的整个request的过程中使用同一个hibernate session,
			而是每个数据访问都会产生各自的seesion,等于没有Open Session in View
	-->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>/</url-pattern>
	</filter-mapping>
	
	//过滤程序实现 Filter 类
	public class ReportFilter implements Filter {
		private FilterConfig filterConfig;
	    public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain)throws ServletException, IOException { 
	        HttpServletRequest req = (HttpServletRequest)request;
	        HttpServletResponse resp = (HttpServletResponse) response;
	        System.out.println(req.getRemoteHost() +" tried to access " +req.getRequestURL() +" on " + new Date() + ".");
	        chain.doFilter(req,resp);
	    }   
	  
	    public void init(FilterConfig config)throws ServletException {
	    	this.filterConfig = filterConfig;
	    }   
	  
	    public void destroy() {
	    	this.filterConfig = null;
	    }   
	}
	
5、指定 Servlet 名和 URL 地址
	<!-- springMVC的servlet,加载/WEB-INF/conf/spring/springMVC-config.xml文件，启动springMVC 
		如果没有contextConfigLocation参数，则在/WEB_INF下去找springMVC-servlet.xml文件
	-->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 
			<param-value></param-value>
			-->
			<param-value>/WEB-INF/conf/spring/springMVC.xml</param-value>
		</init-param>
		<!-- 值大于等于0表示容器启动应用时候加载该servlet，数值越小优先级越高 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	//servlet 程序实现 HttpServlet 类
	//注意：在servlet中定义的<init-param></init-param>参数，只能在servlet的init()方法中通过this.getInitParameter("param1")取得.
	
6、欢迎页面('/'转向springMVC控制，格式和servlet-mapping配置一致)
	<welcome-file-list>
		<welcome-file>/</welcome-file>
	</welcome-file-list>

7、指定错误页面
	<error-page>
		<error-code>404</error-code>
		<location>/error404.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Exception<exception-type>
		<location>/exception.jsp<location>
	</error-page>

8、设置会话过期时间，单位分钟
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>